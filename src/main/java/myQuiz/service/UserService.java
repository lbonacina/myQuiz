package myQuiz.service;

import com.mysema.query.BooleanBuilder;
import myQuiz.model.user.QUser;
import myQuiz.model.user.Role;
import myQuiz.model.user.User;
import myQuiz.repository.RoleRepository;
import myQuiz.repository.UserConstraintException;
import myQuiz.repository.UserRepository;
import myQuiz.util.AppLog;
import myQuiz.util.RandomString;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.subject.Subject;
import org.slf4j.Logger;

import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import java.io.Serializable;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * User: eluibon
 * Date: 11/12/12
 * Time: 14.06
 */
@Stateless
public class UserService implements Serializable {
// ------------------------------ FIELDS ------------------------------

    private static final long serialVersionUID = 2332677310929733841L;

    @Inject @AppLog
    private Logger log;

    @Inject EntityManager entityManager;
    @Inject UserRepository userRepository;
    @Inject RoleRepository roleRepository;

// -------------------------- OTHER METHODS --------------------------

    public List<User> findAll() {

        Subject loggedSubject = SecurityUtils.getSubject();
        /*
            extremely efficient use of querydsl generated metamodel classes and Spring Data JPA QueryDslPredicateExecutor
            to pass some predicates (ie a where condition) to the findAll method based on the permissions of the logged user (subject)
            it's also a wonderful alternative to the godawful JPA2 Criteria Queries, don't care if need to depend on querydsl :)
        */
        // generated metamodel class
        QUser user = QUser.user;
        BooleanBuilder bb = new BooleanBuilder();

        // if we decide to allow for logical deletion of users or any other kind of filter, for example on organizations
        // or country they can be added here really quickly
        //if ( ! loggedSubject.isPermitted("user:list_deleted"))
        //    bb.and(user.deleted.isFalse()) ;
        // if not permitted to list superadmin users add superadmin = false
        if (loggedSubject.isPermitted("user:list_superadmin"))
            bb.or(user.roles.contains(roleRepository.findByRole("Superadmin")));
        if (loggedSubject.isPermitted("user:list_admin"))
            bb.or(user.roles.contains(roleRepository.findByRole("Admin")));
        if (loggedSubject.isPermitted("user:list_user"))
            bb.or(user.roles.contains(roleRepository.findByRole("User")));
        if (loggedSubject.isPermitted("user:list_guest"))
            bb.or(user.roles.contains(roleRepository.findByRole("Guest")));


        return (List<User>) userRepository.findAll(bb.getValue());
    }


    /*
    public List<User> findAllWithUserPermission() {

        QUser user = QUser.user;

        JPAQuery query = new JPAQuery(entityManager);
        Role r = roleRepository.findByRole("Admin") ;
        return query.from(user).where(user.roles.contains(r)).list(user) ;
    }
    */

    public List<Role> findAllRoles() {

        return roleRepository.findAll();
    }

    public User findByUsername(String username) {

        return userRepository.findByUsername(username);
    }

    public AuthorizationInfo getAuthorizationInfoForUser(String username) {

        User user = userRepository.findByUsername(username);
        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo(user.getRoleNames());
        info.setStringPermissions(user.getPermissionNames());
        log.debug("Found Roles : [{}], Permissions : [{}]", user.getRoleNames(), user.getPermissionNames());
        return info;
    }

    public User trackSuccessfulLoginAttempt(String username) {

        User user = userRepository.findByUsername(username);
        user.trackSuccessfulLoginAttempt();
        log.debug("Successful login attempt by username : {}");
        return user;
    }

    public int trackFailedLoginAttempt(String username) {

        User user = userRepository.findByUsername(username);
        int count = user.trackFailedLoginAttempt();
        log.debug("Failed login attempt by username : {}, current attempt count : {}", username, user.getFailedLoginAttemptCount());
        return count;
    }


    /**
     * create a user for guest login, username is generated as a 20-char random string,
     * password is the normal password generated by reset.
     * we use the "decrypted_password" field to pass back the password for registration
     */
    public User createGuest(String firstName, String lastName, String email) throws UserConstraintException {

        Set<UserConstraintException.Violations> cv = new HashSet<UserConstraintException.Violations>();

        User user = new User();
        user.setFirstName(firstName);
        user.setLastName(lastName);
        user.setEmail(email);
        user.setPhone("1234567890");
        user.setUsername(null);

        if (!checkEmailUniqueness(user)) {
            cv.add(UserConstraintException.Violations.EMAIL_NOT_UNIQUE);
            throw new UserConstraintException(cv);
        }

        RandomString rs = new RandomString(20);
        user.setUsername(rs.nextString());
        user.resetPassword();

        Role role = roleRepository.findByRole("Guest");
        Set<Role> roles = new HashSet<Role>();
        roles.add(role);
        user.assignRoles(roles);

        userRepository.save(user);
        return user;
    }


    public void save(User user) throws UserConstraintException {

        Set<UserConstraintException.Violations> cv = new HashSet<UserConstraintException.Violations>();

        if (!checkUsernameUniqueness(user))
            cv.add(UserConstraintException.Violations.USERNAME_NOT_UNIQUE);

        if (!checkEmailUniqueness(user))
            cv.add(UserConstraintException.Violations.EMAIL_NOT_UNIQUE);

        if (cv.size() > 0)
            throw new UserConstraintException(cv);

        try {
            userRepository.save(user);
        }
        catch (RuntimeException rte) {

            cv.add(UserConstraintException.Violations.UNKNOWN_ERROR);
            throw new UserConstraintException(cv);
        }
    }

    private boolean checkUsernameUniqueness(User user) {

        User u = userRepository.findByUsername(user.getUsername());
        return (u == null) || u.getId().equals(user.getId());
    }

    private boolean checkEmailUniqueness(User user) {

        User u = userRepository.findByEmail(user.getEmail());
        return (u == null) || u.getId().equals(user.getId());
    }

    public void delete(User user) {

        userRepository.delete(user);
    }
}
